{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","enableDark","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","toLowerCase","length","alert","document","getElementById","select","navigator","clipboard","writeText","split","defaultProps","about","App","setMode","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f53976b7.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom'\n\n\nexport default function Navbar(props) {\n    return (\n        <nav className={ ` navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} ` }>\n  <div className=\"container-fluid\">\n    <a className=\"navbar-brand\" href='#'>{props.title}</a>\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li className=\"nav-item\">\n          <a className=\"nav-link active\" aria-current=\"page\" href='#'>Home</a>\n        </li>\n        {/* <li className=\"nav-item\">\n          <a className=\"nav-link\" href='/about'>{props.about}</a>\n        </li> */}\n      </ul>\n      {/* <form className=\"d-flex\">\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n        <button className=\"btn btn-success\" type=\"submit\">Search</button>\n      </form> */}\n\n    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n  <input className=\"form-check-input\" onClick = {props.enableDark} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\n</div>\n    </div>\n  </div>\n</nav>\n    )\n}\n\nNavbar.propTypes = {\n                                    title: PropTypes.string.isRequired,\n                                    about: PropTypes.string.isRequired\n                                }\n\nNavbar.defaultProps = {\n    title: 'Website Name',\n    about: 'About Developer'\n}\n","import React, {useState} from 'react'\n\n\n// console.log(useState('Enter text here2...'));\n\nexport default function TextForm(props) {\n\n    const handleUpClick =()=>{\n        // console.log(\"Upper case was clicked \"+text);\n        let newText = text.toUpperCase();\n        setText(newText);\n        //props.showAlert(\"Converted to uppercase!\", \"success\");\n    }\n\n    const handleLowClick =()=>{\n        // console.log(\"Upper case was clicked \"+text);\n        let newText = text.toLowerCase();\n        setText(newText);\n        //props.showAlert(\"Converted to lowercase!\", \"success\");\n    }\n    const handleClearClick =()=>{\n        // console.log(\"Upper case was clicked \"+text);\n        let newText = '';\n        setText(newText);\n        //props.showAlert(\"Text Cleared!\", \"success\");\n    }\n    const handleCopy =()=>{\n        // console.log(\"Upper case was clicked \"+text);\n        var text = document.getElementById(\"myBox\");\n        text.select();\n        navigator.clipboard.writeText(text.value);\n    }\n\n    const handleCharCount =()=>{\n        // console.log(\"Upper case was clicked \"+text)\n        let newText = text.length;\n        alert(\"Total number of character count = \"+newText);\n    }\n    const handleOnChange =(event)=>{\n        // console.log(\"Handle on CHange\");\n        setText(event.target.value);\n    }\n\n    const [text,setText] = useState(' ');\n    //  setText(\"asdfghjkl\"); //correct way to change the state\n    // text = \"new text\";//wrong way to change the state\n\n    return (\n        <>\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\n            <h1 className=\"mb-4\">{props.heading}</h1>\n            <div className=\"mb-3\">\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={\n                    {backgroundColor: props.mode==='dark'?'white':'white', \n                    color:props.mode==='dark'?'dark':'dark'}}\n                 id=\"myBox\" rows=\"9\"></textarea>\n        </div>\n            <button className=\"btn btn-primary mx-2 my-3\" onClick={handleUpClick}>Convert to UpperCase</button>\n            <button className=\"btn btn-primary mx-2 my-3\" onClick={handleLowClick}>Convert to LowerCase</button>\n            <button className=\"btn btn-primary mx-2 my-3\" onClick={handleClearClick}>Clear Text</button>\n            <button className=\"btn btn-primary mx-2 my-3\" onClick={handleCharCount}>Total Word Count</button>\n            <button className=\"btn btn-primary mx-2 my-3\" onClick={handleCopy}>Copy Text</button>\n    </div>\n\n    <div className=\"container my-4\" style={{color: props.mode==='dark'?'white':'black'}}>\n        <h2>Your Text Summary</h2>\n        <p>Total words count = <strong>{text.split(\" \").length}</strong></p>\n        <p>Read Time = <strong>{ 0.008 * text.split(\" \").length}</strong> minutes</p>\n        <h2>Preview</h2>\n        <p>{text.length>0?text:\"Nothing to preview!\"}</p>\n    </div>\n    </>\n    )\n}\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar.js';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');  //Whether dark mode is enable or not\n  \n    const enableDark = ()=>{\n      if(mode=== 'light'){\n        setMode('dark');\n        document.body.style.backgroundColor = '#454545';\n      }else{\n        setMode('light');\n        document.body.style.backgroundColor = 'white';\n      }\n    }\n  return (\n    <>\n     {/* <Router> */}\n        <Navbar title=\"Hello Saket\" about=\"About Us\" mode={mode} enableDark={enableDark}/> \n        {/* <Navbar/> */}\n        <div className=\"container my-5\">\n            {/* <Switch>\n                  <Route exact path=\"/about\">\n                        <About />\n                    </Route>\n                  <Route exact path=\"/\">\n                        <TextForm heading=\"Enter the text to analyze below\" mode = {mode}/>\n                    </Route>\n                </Switch> */}\n                <TextForm heading=\"Enter the text to analyze below\" mode = {mode}/>\n          </div>\n      {/* </Router> */}\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}